# Generated by Django 4.2.20 on 2025-03-23 22:20

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='FirstClassification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=16, verbose_name='一级分类')),
                ('is_show', models.BooleanField(default=True, verbose_name='是否显示')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('modified_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
            ],
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=32, verbose_name='笔记标题')),
                ('brief', models.CharField(blank=True, max_length=64, null=True, verbose_name='笔记摘要')),
                ('content', models.TextField(verbose_name='笔记内容')),
                ('cover_img', models.ImageField(blank=True, null=True, upload_to='note_covers/', verbose_name='封面图')),
                ('is_show', models.BooleanField(default=True, verbose_name='是否显示')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('modified_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
            ],
            options={
                'ordering': ['-created_time'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=16, unique=True, verbose_name='标签名称')),
                ('is_show', models.BooleanField(default=True, verbose_name='是否显示')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('modified_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
            ],
        ),
        migrations.CreateModel(
            name='SecondClassification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=16, verbose_name='二级分类')),
                ('is_show', models.BooleanField(default=True, verbose_name='是否显示')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('modified_time', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('first_classification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='BackEnd.firstclassification')),
            ],
        ),
        migrations.CreateModel(
            name='NoteInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed_count', models.IntegerField(default=0, verbose_name='被浏览次数')),
                ('liked_count', models.IntegerField(default=0, verbose_name='被赞次数')),
                ('disgusted_count', models.IntegerField(default=0, verbose_name='被踩次数')),
                ('encouraged_count', models.IntegerField(default=0, verbose_name='被鼓励次数')),
                ('note', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='BackEnd.note')),
            ],
        ),
        migrations.AddField(
            model_name='note',
            name='second_classification',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='BackEnd.secondclassification'),
        ),
        migrations.AddField(
            model_name='note',
            name='tags',
            field=models.ManyToManyField(to='BackEnd.tag'),
        ),
    ]
